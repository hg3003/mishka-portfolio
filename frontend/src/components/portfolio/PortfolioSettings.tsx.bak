// frontend/src/components/portfolio/PortfolioSettings.tsx
import React, { useState } from 'react';

export interface PortfolioSettings {
  // Page Format
  pageFormat: 'A4' | 'A3_SPREAD'; // A3 spread = 2x A4 pages side by side
  
  // Content Layout (how to arrange the SAME content)
  contentLayout: {
    imagePosition: 'top' | 'left' | 'right' | 'full-bleed';
    textColumns: 1 | 2 | 3;
    metadataPosition: 'sidebar' | 'header' | 'footer';
    imageGrid: 'single' | '2x2' | '3x2' | 'masonry';
  };
  
  // Visual Style
  colorScheme: 'classic' | 'modernGray' | 'warmMinimal' | 'custom';
  customColors?: {
    primary: string;
    secondary: string;
    accent: string;
    text: string;
    light: string;
  };
  
  // Typography
  typography: {
    scale: 'golden' | 'modular' | 'traditional';
    bodySize: 9 | 10 | 11 | 12;
    headingWeight: 'light' | 'regular' | 'bold';
  };
  
  // Spacing
  margins: {
    top: number;
    bottom: number;
    left: number;
    right: number;
  };
  
  // Content Density
  density: 'compact' | 'comfortable' | 'spacious';
}

interface Props {
  settings: PortfolioSettings;
  onChange: (settings: PortfolioSettings) => void;
  projectCount: number;
  estimatedPages: number;
}

// Color scheme presets (keep these as they were good)
const colorSchemes = {
  classic: {
    name: 'Classic Swiss',
    colors: {
      primary: '#000000',
      secondary: '#666666',
      accent: '#DC2626',
      text: '#000000',
      light: '#F5F5F5'
    }
  },
  modernGray: {
    name: 'Modern Gray',
    colors: {
      primary: '#1F2937',
      secondary: '#6B7280',
      accent: '#3B82F6',
      text: '#111827',
      light: '#F9FAFB'
    }
  },
  warmMinimal: {
    name: 'Warm Minimal',
    colors: {
      primary: '#18181B',
      secondary: '#71717A',
      accent: '#EA580C',
      text: '#09090B',
      light: '#FAFAF9'
    }
  }
};

// Simple chevron icon
const ChevronDown = ({ className, size = 20 }: { className?: string; size?: number }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" className={className}>
    <polyline points="6 9 12 15 18 9"></polyline>
  </svg>
);

export const PortfolioSettings: React.FC<Props> = ({ 
  settings: rawSettings, 
  onChange, 
  projectCount,
  estimatedPages 
}) => {
  // Provide defaults for missing fields
  const settings: PortfolioSettings = {
    pageFormat: rawSettings.pageFormat || 'A4',
    contentLayout: rawSettings.contentLayout || {
      imagePosition: 'top',
      textColumns: 1,
      metadataPosition: 'sidebar',
      imageGrid: 'single'
    },
    colorScheme: rawSettings.colorScheme || 'classic',
    customColors: rawSettings.customColors,
    typography: rawSettings.typography || {
      scale: 'golden',
      bodySize: 10,
      headingWeight: 'regular'
    },
    margins: rawSettings.margins || {
      top: 20,
      bottom: 20,
      left: 20,
      right: 20
    },
    density: rawSettings.density || 'comfortable'
  };
  
  const [expandedSection, setExpandedSection] = useState<string | null>('format');

  const updateSetting = <K extends keyof PortfolioSettings>(
    key: K,
    value: PortfolioSettings[K]
  ) => {
    onChange({ ...settings, [key]: value });
  };

  const updateContentLayout = <K extends keyof PortfolioSettings['contentLayout']>(
    key: K,
    value: PortfolioSettings['contentLayout'][K]
  ) => {
    onChange({
      ...settings,
      contentLayout: {
        ...settings.contentLayout,
        [key]: value
      }
    });
  };

  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  return (
    <div className="space-y-4">
      {/* Page Format Selection */}
      <div className="border rounded-lg">
        <button
          onClick={() => toggleSection('format')}
          className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
        >
          <div className="flex items-center gap-3">
            <span className="text-lg">üìÑ</span>
            <span className="font-medium">Page Format</span>
            <span className="text-sm text-gray-500">
              {settings.pageFormat === 'A4' ? 'A4 Portrait' : 'A3 Landscape (Spread)'}
            </span>
          </div>
          <ChevronDown 
            className={`transition-transform ${expandedSection === 'format' ? 'rotate-180' : ''}`} 
            size={20} 
          />
        </button>
        
        {expandedSection === 'format' && (
          <div className="p-4 border-t">
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => updateSetting('pageFormat', 'A4')}
                className={`p-4 border rounded-lg ${
                  settings.pageFormat === 'A4' 
                    ? 'border-black bg-gray-50' 
                    : 'border-gray-200 hover:border-gray-400'
                }`}
              >
                <div className="mb-2">
                  <div className="w-full h-24 bg-gray-200 rounded border-2 border-gray-300"></div>
                </div>
                <div className="text-sm font-medium">A4 Portrait</div>
                <div className="text-xs text-gray-500 mt-1">
                  Single page, vertical layout
                </div>
              </button>
              
              <button
                onClick={() => updateSetting('pageFormat', 'A3_SPREAD')}
                className={`p-4 border rounded-lg ${
                  settings.pageFormat === 'A3_SPREAD' 
                    ? 'border-black bg-gray-50' 
                    : 'border-gray-200 hover:border-gray-400'
                }`}
              >
                <div className="mb-2">
                  <div className="grid grid-cols-2 gap-1">
                    <div className="w-full h-24 bg-gray-200 rounded border-2 border-gray-300"></div>
                    <div className="w-full h-24 bg-gray-200 rounded border-2 border-gray-300"></div>
                  </div>
                </div>
                <div className="text-sm font-medium">A3 Spread</div>
                <div className="text-xs text-gray-500 mt-1">
                  Double page, horizontal layout
                </div>
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Content Layout Options */}
      <div className="border rounded-lg">
        <button
          onClick={() => toggleSection('layout')}
          className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
        >
          <div className="flex items-center gap-3">
            <span className="text-lg">üìê</span>
            <span className="font-medium">Content Layout</span>
          </div>
          <ChevronDown 
            className={`transition-transform ${expandedSection === 'layout' ? 'rotate-180' : ''}`} 
            size={20} 
          />
        </button>
        
        {expandedSection === 'layout' && (
          <div className="p-4 border-t space-y-4">
            {/* Image Position */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Image Position</label>
              <div className="grid grid-cols-4 gap-2">
                {(['top', 'left', 'right', 'full-bleed'] as const).map((position) => (
                  <button
                    key={position}
                    onClick={() => updateContentLayout('imagePosition', position)}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.contentLayout.imagePosition === position
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {position.charAt(0).toUpperCase() + position.slice(1).replace('-', ' ')}
                  </button>
                ))}
              </div>
            </div>

            {/* Text Columns */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Text Columns</label>
              <div className="grid grid-cols-3 gap-2">
                {[1, 2, 3].map((cols) => (
                  <button
                    key={cols}
                    onClick={() => updateContentLayout('textColumns', cols as 1 | 2 | 3)}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.contentLayout.textColumns === cols
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {cols} Column{cols > 1 ? 's' : ''}
                  </button>
                ))}
              </div>
            </div>

            {/* Metadata Position */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Project Info Position</label>
              <div className="grid grid-cols-3 gap-2">
                {(['sidebar', 'header', 'footer'] as const).map((position) => (
                  <button
                    key={position}
                    onClick={() => updateContentLayout('metadataPosition', position)}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.contentLayout.metadataPosition === position
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {position.charAt(0).toUpperCase() + position.slice(1)}
                  </button>
                ))}
              </div>
            </div>

            {/* Image Grid */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Image Grid Style</label>
              <div className="grid grid-cols-4 gap-2">
                {(['single', '2x2', '3x2', 'masonry'] as const).map((grid) => (
                  <button
                    key={grid}
                    onClick={() => updateContentLayout('imageGrid', grid)}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.contentLayout.imageGrid === grid
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {grid === 'single' ? 'Single' : grid === 'masonry' ? 'Masonry' : grid.toUpperCase()}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Color Scheme Selection (keep as before, it's good) */}
      <div className="border rounded-lg">
        <button
          onClick={() => toggleSection('colors')}
          className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
        >
          <div className="flex items-center gap-3">
            <span className="text-lg">üé®</span>
            <span className="font-medium">Color Scheme</span>
            <div className="flex gap-1">
              {Object.values(
                settings.colorScheme === 'custom' && settings.customColors
                  ? settings.customColors
                  : colorSchemes[settings.colorScheme as keyof typeof colorSchemes]?.colors || colorSchemes.classic.colors
              ).map((color, i) => (
                <div
                  key={i}
                  className="w-4 h-4 rounded"
                  style={{ backgroundColor: color }}
                />
              ))}
            </div>
          </div>
          <ChevronDown 
            className={`transition-transform ${expandedSection === 'colors' ? 'rotate-180' : ''}`} 
            size={20} 
          />
        </button>
        
        {expandedSection === 'colors' && (
          <div className="p-4 border-t space-y-3">
            {Object.entries(colorSchemes).map(([key, scheme]) => (
              <button
                key={key}
                onClick={() => updateSetting('colorScheme', key as any)}
                className={`w-full p-3 border rounded-lg ${
                  settings.colorScheme === key 
                    ? 'border-black bg-gray-50' 
                    : 'border-gray-200 hover:border-gray-400'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">{scheme.name}</span>
                  <div className="flex gap-2">
                    {Object.entries(scheme.colors).map(([colorKey, color]) => (
                      <div className="text-center" key={colorKey}>
                        <div
                          className="w-8 h-8 rounded border border-gray-200"
                          style={{ backgroundColor: color }}
                        />
                        <div className="text-xs text-gray-400 mt-1">
                          {colorKey.slice(0, 3)}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Density & Spacing */}
      <div className="border rounded-lg">
        <button
          onClick={() => toggleSection('density')}
          className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
        >
          <div className="flex items-center gap-3">
            <span className="text-lg">üìè</span>
            <span className="font-medium">Spacing & Density</span>
            <span className="text-sm text-gray-500">
              {settings.density.charAt(0).toUpperCase() + settings.density.slice(1)}
            </span>
          </div>
          <ChevronDown 
            className={`transition-transform ${expandedSection === 'density' ? 'rotate-180' : ''}`} 
            size={20} 
          />
        </button>
        
        {expandedSection === 'density' && (
          <div className="p-4 border-t space-y-4">
            {/* Content Density */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Content Density</label>
              <div className="grid grid-cols-3 gap-2">
                {(['compact', 'comfortable', 'spacious'] as const).map((density) => (
                  <button
                    key={density}
                    onClick={() => updateSetting('density', density)}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.density === density
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {density.charAt(0).toUpperCase() + density.slice(1)}
                  </button>
                ))}
              </div>
            </div>

            {/* Margins */}
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Page Margins (mm)</label>
              <div className="grid grid-cols-2 gap-3">
                {(['top', 'bottom', 'left', 'right'] as const).map((side) => (
                  <div key={side}>
                    <label className="text-xs text-gray-500 capitalize">{side}</label>
                    <input
                      type="number"
                      min="10"
                      max="40"
                      value={settings.margins[side]}
                      onChange={(e) => {
                        const newMargins = {
                          ...settings.margins,
                          [side]: parseInt(e.target.value) || 20
                        };
                        updateSetting('margins', newMargins);
                      }}
                      className="w-full mt-1 px-2 py-1 border rounded text-xs"
                    />
                  </div>
                ))}
              </div>
              
              <div className="mt-3 flex gap-2">
                <button
                  onClick={() => updateSetting('margins', { top: 15, bottom: 15, left: 15, right: 15 })}
                  className="text-xs px-2 py-1 border rounded hover:bg-gray-50"
                >
                  Narrow
                </button>
                <button
                  onClick={() => updateSetting('margins', { top: 20, bottom: 20, left: 20, right: 20 })}
                  className="text-xs px-2 py-1 border rounded hover:bg-gray-50"
                >
                  Standard
                </button>
                <button
                  onClick={() => updateSetting('margins', { top: 30, bottom: 30, left: 30, right: 30 })}
                  className="text-xs px-2 py-1 border rounded hover:bg-gray-50"
                >
                  Wide
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Typography Settings */}
      <div className="border rounded-lg">
        <button
          onClick={() => toggleSection('typography')}
          className="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50"
        >
          <div className="flex items-center gap-3">
            <span className="text-lg">üî§</span>
            <span className="font-medium">Typography</span>
            <span className="text-sm text-gray-500">
              {settings.typography.bodySize}pt
            </span>
          </div>
          <ChevronDown 
            className={`transition-transform ${expandedSection === 'typography' ? 'rotate-180' : ''}`} 
            size={20} 
          />
        </button>
        
        {expandedSection === 'typography' && (
          <div className="p-4 border-t space-y-4">
            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Body Text Size</label>
              <div className="grid grid-cols-4 gap-2">
                {[9, 10, 11, 12].map((size) => (
                  <button
                    key={size}
                    onClick={() => onChange({
                      ...settings,
                      typography: { ...settings.typography, bodySize: size as any }
                    })}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.typography.bodySize === size
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {size}pt
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="text-xs text-gray-600 font-medium mb-2 block">Heading Weight</label>
              <div className="grid grid-cols-3 gap-2">
                {(['light', 'regular', 'bold'] as const).map((weight) => (
                  <button
                    key={weight}
                    onClick={() => onChange({
                      ...settings,
                      typography: { ...settings.typography, headingWeight: weight }
                    })}
                    className={`px-3 py-2 text-xs border rounded ${
                      settings.typography.headingWeight === weight
                        ? 'border-black bg-gray-100'
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    {weight.charAt(0).toUpperCase() + weight.slice(1)}
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Portfolio Stats */}
      <div className="p-4 bg-gray-50 rounded-lg">
        <div className="text-sm font-medium mb-2">Portfolio Overview</div>
        <div className="grid grid-cols-3 gap-4 text-xs">
          <div>
            <div className="text-gray-500">Projects</div>
            <div className="font-medium">{projectCount}</div>
          </div>
          <div>
            <div className="text-gray-500">Est. Pages</div>
            <div className="font-medium">{estimatedPages}</div>
          </div>
          <div>
            <div className="text-gray-500">Format</div>
            <div className="font-medium">{settings.pageFormat === 'A4' ? 'A4' : 'A3'}</div>
          </div>
        </div>
      </div>
    </div>
  );
};